package com.scale.payment.domain.model;

import lombok.*;
import lombok.experimental.NonFinal;

import java.time.LocalDate;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.UUID;

@Value
@EqualsAndHashCode(exclude = "limit")
public class Card {
    @NonNull String number;
    @NonNull Short digit;
    @NonNull ExpirationDate ExpirationDate;
    @NonNull @NonFinal Money limit;

    public Receipt pay(Money amount, String reference) {
        if (this.isExpired())
            throw new CardIsExpired();

        if (!hasLimitFor(amount))
            throw new InsufficientFunds();

        this.limit = limit.subtract(amount);

        return Receipt.generate(this, amount, reference);
    }

    /**
     * Used when there is a need to recreate the receipt e.g. getting it from database.
     * @param amount    The amount paid
     * @param reference Reference of the payment
     * @return          A receipt associated with this card.
     */
    public Receipt regenerateReceipt(@NonNull String number, @NonNull ZonedDateTime time,
                                     @NonNull Money amount, @NonNull String reference) {
        return Receipt.regenerate(this, number, time, amount, reference);
    }

    public boolean hasLimitFor(Money amount) {
        try {
            limit.subtract(amount);
            return true;
        } catch (Money.InvalidMoneyAmount negativeBalance) {
            return false;
        }
    }

    public boolean isExpired() {
        var expiredAt = getExpirationDate().asDate();
        return expiredAt.isBefore(LocalDate.now());
    }

    @Value
    public static class ExpirationDate {
        @NonNull String value;

        public ExpirationDate(@NonNull String val) {
            if (val.length() != 7 || val.charAt(2) != '/')
                throw new CardError("Expiration date should be in format MM/YYYY");
            this.value = val;
        }

        public LocalDate asDate() {
            String date = String.format("01/%s", value);
            return LocalDate.parse(date, DateTimeFormatter.ofPattern("dd/MM/yyyy"))
                    .with(TemporalAdjusters.lastDayOfMonth());
        }
    }

    /**
     * The receipt from a card payment. Can only be generated by the card.
     */
    @Value
    @NonFinal
    @AllArgsConstructor(access = AccessLevel.PRIVATE)
    public static class Receipt {
        @NonNull Card card;
        @NonNull String number;
        @NonNull ZonedDateTime time;
        @NonNull String reference;
        @NonNull Money amount;

        private static Receipt generate(@NonNull Card card, @NonNull Money amount, @NonNull String reference) {
            return new Receipt(card, UUID.randomUUID().toString(), ZonedDateTime.now(ZoneOffset.UTC), reference, amount);
        }

        private static Receipt regenerate(@NonNull Card card, @NonNull String number, @NonNull ZonedDateTime time,
                                          @NonNull Money amount, @NonNull String reference) {
            return new Receipt(card, number, time, reference, amount);
        }

    }

    public static class OrderAlreadyPaidReceipt extends Receipt {

        private OrderAlreadyPaidReceipt(@NonNull Card card, @NonNull String number, @NonNull ZonedDateTime time, @NonNull String reference, @NonNull Money amount) {
            super(card, number, time, reference, amount);
        }

        public OrderAlreadyPaidReceipt(Receipt receipt) {
            this(receipt.card, receipt.number, receipt.time, receipt.reference, receipt.amount);
        }

    }

    public static class CardError extends PaymentError {
        public CardError(String msg) {
            super(msg);
        }
    }

    public static class CardIsExpired extends CardError {
        public CardIsExpired() {
            super("This card is expired");
        }
    }

    public static class InsufficientFunds extends CardError {
        public InsufficientFunds() {
            super("Insufficient funds");
        }
    }

}
